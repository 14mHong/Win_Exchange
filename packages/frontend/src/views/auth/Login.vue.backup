<template>
  <div class="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-dark-900 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
      <!-- Header -->
      <div class="text-center">
        <div class="mx-auto w-16 h-16 bg-primary-600 rounded-lg flex items-center justify-center mb-4">
          <span class="text-white font-bold text-2xl">CEX</span>
        </div>
        <h2 class="text-3xl font-bold text-gray-900 dark:text-gray-100">
          Sign in to your account
        </h2>
        <p class="mt-2 text-sm text-gray-600 dark:text-gray-400">
          Or
          <router-link
            to="/register"
            class="font-medium text-primary-600 hover:text-primary-500"
          >
            create a new account
          </router-link>
        </p>
      </div>

      <!-- Login Form -->
      <form
        class="mt-8 space-y-6"
        @submit.prevent="handleSubmit"
      >
        <div class="space-y-4">
          <!-- Email -->
          <div>
            <label
              for="email"
              class="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Email address
            </label>
            <input
              id="email"
              v-model="form.email"
              type="email"
              required
              :class="[
                'input mt-1',
                errors.email ? 'input-error' : ''
              ]"
              placeholder="Enter your email"
            >
            <p
              v-if="errors.email"
              class="mt-1 text-sm text-danger-600"
            >
              {{ errors.email }}
            </p>
          </div>

          <!-- Password -->
          <div>
            <label
              for="password"
              class="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Password
            </label>
            <div class="relative mt-1">
              <input
                id="password"
                v-model="form.password"
                :type="showPassword ? 'text' : 'password'"
                required
                :class="[
                  'input pr-10',
                  errors.password ? 'input-error' : ''
                ]"
                placeholder="Enter your password"
              >
              <button
                type="button"
                class="absolute inset-y-0 right-0 pr-3 flex items-center"
                @click="showPassword = !showPassword"
              >
                <EyeIcon
                  v-if="!showPassword"
                  class="h-5 w-5 text-gray-400"
                />
                <EyeSlashIcon
                  v-else
                  class="h-5 w-5 text-gray-400"
                />
              </button>
            </div>
            <p
              v-if="errors.password"
              class="mt-1 text-sm text-danger-600"
            >
              {{ errors.password }}
            </p>
          </div>

          <!-- 2FA Token (shown when required) -->
          <div v-if="requires2FA">
            <label
              for="twoFAToken"
              class="block text-sm font-medium text-gray-700 dark:text-gray-300"
            >
              Two-Factor Authentication Code
            </label>
            <input
              id="twoFAToken"
              v-model="form.twoFAToken"
              type="text"
              maxlength="6"
              :class="[
                'input mt-1',
                errors.twoFAToken ? 'input-error' : ''
              ]"
              placeholder="Enter 6-digit code"
            >
            <p
              v-if="errors.twoFAToken"
              class="mt-1 text-sm text-danger-600"
            >
              {{ errors.twoFAToken }}
            </p>
          </div>
        </div>

        <!-- Remember me & Forgot password -->
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <input
              id="remember"
              v-model="form.remember"
              type="checkbox"
              class="h-4 w-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded"
            >
            <label
              for="remember"
              class="ml-2 block text-sm text-gray-900 dark:text-gray-100"
            >
              Remember me
            </label>
          </div>

          <router-link
            to="/reset-password"
            class="text-sm font-medium text-primary-600 hover:text-primary-500"
          >
            Forgot your password?
          </router-link>
        </div>

        <!-- Submit Button -->
        <button
          type="submit"
          :disabled="isLoading"
          :class="[
            'btn btn-primary w-full',
            isLoading ? 'opacity-50 cursor-not-allowed' : ''
          ]"
        >
          <div
            v-if="isLoading"
            class="flex items-center justify-center"
          >
            <div class="spinner h-4 w-4 mr-2" />
            Signing in...
          </div>
          <span v-else>Sign in</span>
        </button>

        <!-- OAuth Login -->
        <div class="mt-6">
          <div class="relative">
            <div class="absolute inset-0 flex items-center">
              <div class="w-full border-t border-gray-300 dark:border-gray-600" />
            </div>
            <div class="relative flex justify-center text-sm">
              <span class="px-2 bg-gray-50 dark:bg-dark-900 text-gray-500">Or continue with</span>
            </div>
          </div>

          <div class="mt-6 grid grid-cols-2 gap-3">
            <button
              type="button"
              class="btn btn-outline"
              @click="handleOAuthLogin('google')"
            >
              <svg
                class="h-5 w-5"
                viewBox="0 0 24 24"
              >
                <path
                  fill="currentColor"
                  d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
                />
                <path
                  fill="currentColor"
                  d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
                />
                <path
                  fill="currentColor"
                  d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
                />
                <path
                  fill="currentColor"
                  d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
                />
              </svg>
              Google
            </button>

            <button
              type="button"
              class="btn btn-outline"
              @click="handleOAuthLogin('facebook')"
            >
              <svg
                class="h-5 w-5"
                fill="currentColor"
                viewBox="0 0 24 24"
              >
                <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z" />
              </svg>
              Facebook
            </button>
          </div>
        </div>
      </form>
    </div>
  </div>
</template>

<script>
import { ref, reactive } from 'vue'
import { useRouter } from 'vue-router'
import { useAuthStore } from '@/stores/auth'
import authService from '@/services/authService'
import { EyeIcon, EyeSlashIcon } from '@heroicons/vue/24/outline'

export default {
  name: 'Login',
  components: {
    EyeIcon,
    EyeSlashIcon
  },
  setup() {
    const router = useRouter()
    const authStore = useAuthStore()

    const form = reactive({
      email: '',
      password: '',
      twoFAToken: '',
      remember: false
    })

    const errors = reactive({})
    const isLoading = ref(false)
    const showPassword = ref(false)
    const requires2FA = ref(false)

    const validateForm = () => {
      const newErrors = {}

      if (!form.email) {
        newErrors.email = 'Email is required'
      } else if (!authService.validateEmail(form.email)) {
        newErrors.email = 'Please enter a valid email address'
      }

      if (!form.password) {
        newErrors.password = 'Password is required'
      }

      if (requires2FA.value && !form.twoFAToken) {
        newErrors.twoFAToken = 'Two-factor authentication code is required'
      } else if (requires2FA.value && form.twoFAToken.length !== 6) {
        newErrors.twoFAToken = 'Please enter a 6-digit code'
      }

      Object.assign(errors, newErrors)
      return Object.keys(newErrors).length === 0
    }

    const clearErrors = () => {
      Object.keys(errors).forEach(key => {
        delete errors[key]
      })
    }

    const handleSubmit = async () => {
      clearErrors()
      
      if (!validateForm()) {
        return
      }

      try {
        isLoading.value = true

        const credentials = {
          email: form.email,
          password: form.password
        }

        if (requires2FA.value) {
          credentials.twoFAToken = form.twoFAToken
        }

        const result = await authStore.login(credentials)

        if (result.requiresTwoFA) {
          requires2FA.value = true
          return
        }

        // Login successful, redirect to dashboard
        router.push('/dashboard')

      } catch (error) {
        if (error.message.includes('Two-factor authentication required')) {
          requires2FA.value = true
        } else {
          errors.general = error.message
        }
      } finally {
        isLoading.value = false
      }
    }

    const handleOAuthLogin = (provider) => {
      const oauthUrl = authService.getOAuthURL(provider)
      window.location.href = oauthUrl
    }

    return {
      form,
      errors,
      isLoading,
      showPassword,
      requires2FA,
      handleSubmit,
      handleOAuthLogin
    }
  }
}
</script>