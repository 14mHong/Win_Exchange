<template>
  <div class="min-h-screen flex items-center justify-center bg-gray-50 dark:bg-dark-900 py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
      <!-- Header -->
      <div class="text-center">
        <div class="mx-auto w-16 h-16 bg-primary-600 rounded-lg flex items-center justify-center mb-4">
          <span class="text-white font-bold text-2xl">CEX</span>
        </div>
        <h2 class="text-3xl font-bold text-gray-900 dark:text-gray-100">
          Reset your password
        </h2>
        <p class="mt-2 text-sm text-gray-600 dark:text-gray-400">
          Enter your email address and we'll send you a link to reset your password.
        </p>
      </div>

      <!-- Reset Password Form -->
      <form
        class="mt-8 space-y-6"
        @submit.prevent="handleSubmit"
      >
        <div>
          <label
            for="email"
            class="block text-sm font-medium text-gray-700 dark:text-gray-300"
          >
            Email address
          </label>
          <input
            id="email"
            v-model="form.email"
            type="email"
            required
            :class="[
              'input mt-1',
              errors.email ? 'input-error' : ''
            ]"
            placeholder="Enter your email"
          >
          <p
            v-if="errors.email"
            class="mt-1 text-sm text-danger-600"
          >
            {{ errors.email }}
          </p>
        </div>

        <div
          v-if="errors.general"
          class="rounded-md bg-danger-50 p-4"
        >
          <p class="text-sm text-danger-600">
            {{ errors.general }}
          </p>
        </div>

        <div
          v-if="successMessage"
          class="rounded-md bg-success-50 p-4"
        >
          <p class="text-sm text-success-600">
            {{ successMessage }}
          </p>
        </div>

        <button
          type="submit"
          :disabled="isLoading || successMessage"
          :class="[
            'btn btn-primary w-full',
            (isLoading || successMessage) ? 'opacity-50 cursor-not-allowed' : ''
          ]"
        >
          <div
            v-if="isLoading"
            class="flex items-center justify-center"
          >
            <div class="spinner h-4 w-4 mr-2" />
            Sending reset link...
          </div>
          <span v-else-if="successMessage">Reset link sent</span>
          <span v-else>Send reset link</span>
        </button>

        <div class="text-center">
          <router-link
            to="/login"
            class="text-sm font-medium text-primary-600 hover:text-primary-500"
          >
            Back to sign in
          </router-link>
        </div>
      </form>
    </div>
  </div>
</template>

<script>
import { ref, reactive } from 'vue'
import { useRouter } from 'vue-router'
import { useAuthStore } from '@/stores/auth'
import authService from '@/services/authService'

export default {
  name: 'ResetPassword',
  setup() {
    const router = useRouter()
    const authStore = useAuthStore()

    const form = reactive({
      email: ''
    })

    const errors = reactive({})
    const isLoading = ref(false)
    const successMessage = ref('')

    const validateForm = () => {
      const newErrors = {}

      if (!form.email) {
        newErrors.email = 'Email is required'
      } else if (!authService.validateEmail(form.email)) {
        newErrors.email = 'Please enter a valid email address'
      }

      Object.assign(errors, newErrors)
      return Object.keys(newErrors).length === 0
    }

    const clearErrors = () => {
      Object.keys(errors).forEach(key => {
        delete errors[key]
      })
    }

    const handleSubmit = async () => {
      clearErrors()
      successMessage.value = ''

      if (!validateForm()) {
        return
      }

      try {
        isLoading.value = true

        await authStore.resetPassword(form.email)

        successMessage.value = 'If an account with that email exists, we\'ve sent you a reset code.'

        // Redirect to confirmation page after 2 seconds
        setTimeout(() => {
          router.push({
            name: 'ConfirmPasswordReset',
            query: { email: form.email }
          })
        }, 2000)

      } catch (error) {
        errors.general = error.message
      } finally {
        isLoading.value = false
      }
    }

    return {
      form,
      errors,
      isLoading,
      successMessage,
      handleSubmit
    }
  }
}
</script>